// <auto-generated />
using InventoryMgmt.Server.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace InventoryMgmt.Server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220724231147_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("InventoryMgmt.Server.Models.Inventory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PartNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Qty")
                        .HasColumnType("int");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PrimaryKey_InventoryId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("Inventory");
                });

            modelBuilder.Entity("InventoryMgmt.Server.Models.InventorySerial", b =>
                {
                    b.Property<int>("InventoryWarehouseItemId")
                        .HasColumnType("int");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InventoryWarehouseItemId")
                        .HasName("PrimaryKey_InventorySerial_InventoryWarehouseItemId");

                    b.ToTable("InventorySerials");
                });

            modelBuilder.Entity("InventoryMgmt.Server.Models.InventoryWarehouseItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("InventoryId")
                        .HasColumnType("int");

                    b.Property<string>("StorageLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WarehouseItemId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PrimaryKey_InventoryWarehouseItemId");

                    b.HasIndex("InventoryId");

                    b.HasIndex("WarehouseItemId")
                        .IsUnique();

                    b.ToTable("InventoryWarehouseItems");
                });

            modelBuilder.Entity("InventoryMgmt.Server.Models.Warehouse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("PrimaryKey_WarehouseId");

                    b.ToTable("Warehouses");
                });

            modelBuilder.Entity("InventoryMgmt.Server.Models.WarehouseItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PartNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Qty")
                        .HasColumnType("int");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StorageLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.Property<int>("WarehouseItemId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PrimaryKey_WarehouseItemId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("WarehouseItems");
                });

            modelBuilder.Entity("InventoryMgmt.Server.Models.Inventory", b =>
                {
                    b.HasOne("InventoryMgmt.Server.Models.Warehouse", "Warehouse")
                        .WithMany("Inventory")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("ForeignKey_Inventory_Warehouse");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("InventoryMgmt.Server.Models.InventorySerial", b =>
                {
                    b.HasOne("InventoryMgmt.Server.Models.InventoryWarehouseItem", "InventoryWarehouseItem")
                        .WithOne("InventorySerial")
                        .HasForeignKey("InventoryMgmt.Server.Models.InventorySerial", "InventoryWarehouseItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("ForeignKey_InventorySerial_InventoryWarehouseItemId");

                    b.Navigation("InventoryWarehouseItem");
                });

            modelBuilder.Entity("InventoryMgmt.Server.Models.InventoryWarehouseItem", b =>
                {
                    b.HasOne("InventoryMgmt.Server.Models.Inventory", "Inventory")
                        .WithMany("InventoryWarehouseItems")
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("ForeignKey_InventoryWarehouseItem_Inventory");

                    b.HasOne("InventoryMgmt.Server.Models.WarehouseItem", "WarehouseItem")
                        .WithOne("InventoryWarehouseItem")
                        .HasForeignKey("InventoryMgmt.Server.Models.InventoryWarehouseItem", "WarehouseItemId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("ForeignKey_InventoryWarehouseItem_WarehouseItem");

                    b.Navigation("Inventory");

                    b.Navigation("WarehouseItem");
                });

            modelBuilder.Entity("InventoryMgmt.Server.Models.WarehouseItem", b =>
                {
                    b.HasOne("InventoryMgmt.Server.Models.Warehouse", "Warehouse")
                        .WithMany("WarehouseItems")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("ForeignKey_WarehouseItem_Warehouse");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("InventoryMgmt.Server.Models.Inventory", b =>
                {
                    b.Navigation("InventoryWarehouseItems");
                });

            modelBuilder.Entity("InventoryMgmt.Server.Models.InventoryWarehouseItem", b =>
                {
                    b.Navigation("InventorySerial");
                });

            modelBuilder.Entity("InventoryMgmt.Server.Models.Warehouse", b =>
                {
                    b.Navigation("Inventory");

                    b.Navigation("WarehouseItems");
                });

            modelBuilder.Entity("InventoryMgmt.Server.Models.WarehouseItem", b =>
                {
                    b.Navigation("InventoryWarehouseItem");
                });
#pragma warning restore 612, 618
        }
    }
}
